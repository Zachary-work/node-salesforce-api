0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/bin/node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@1.4.3
3 info using node@v0.10.26
4 verbose publish [ '.' ]
5 verbose cache add [ '.', null ]
6 verbose cache add name=undefined spec="." args=[".",null]
7 verbose parsed url { protocol: null,
7 verbose parsed url   slashes: null,
7 verbose parsed url   auth: null,
7 verbose parsed url   host: null,
7 verbose parsed url   port: null,
7 verbose parsed url   hostname: null,
7 verbose parsed url   hash: null,
7 verbose parsed url   search: null,
7 verbose parsed url   query: null,
7 verbose parsed url   pathname: '.',
7 verbose parsed url   path: '.',
7 verbose parsed url   href: '.' }
8 silly lockFile 3a52ce78- .
9 verbose lock . /Users/lean/.npm/3a52ce78-.lock
10 verbose tar pack [ '/var/folders/wm/qxnnh4c14rngxbqgv_39lpyr0000gp/T/npm-9656-MujUx86Q/1397720915806-0.43234812282025814/tmp.tgz',
10 verbose tar pack   '.' ]
11 verbose tarball /var/folders/wm/qxnnh4c14rngxbqgv_39lpyr0000gp/T/npm-9656-MujUx86Q/1397720915806-0.43234812282025814/tmp.tgz
12 verbose folder .
13 info prepublish salesforce-api@0.3.3
14 silly lockFile 1f1177db-tar tar://.
15 verbose lock tar://. /Users/lean/.npm/1f1177db-tar.lock
16 silly lockFile 14785e21-5806-0-43234812282025814-tmp-tgz tar:///var/folders/wm/qxnnh4c14rngxbqgv_39lpyr0000gp/T/npm-9656-MujUx86Q/1397720915806-0.43234812282025814/tmp.tgz
17 verbose lock tar:///var/folders/wm/qxnnh4c14rngxbqgv_39lpyr0000gp/T/npm-9656-MujUx86Q/1397720915806-0.43234812282025814/tmp.tgz /Users/lean/.npm/14785e21-5806-0-43234812282025814-tmp-tgz.lock
18 silly lockFile 1f1177db-tar tar://.
19 silly lockFile 1f1177db-tar tar://.
20 silly lockFile 14785e21-5806-0-43234812282025814-tmp-tgz tar:///var/folders/wm/qxnnh4c14rngxbqgv_39lpyr0000gp/T/npm-9656-MujUx86Q/1397720915806-0.43234812282025814/tmp.tgz
21 silly lockFile 14785e21-5806-0-43234812282025814-tmp-tgz tar:///var/folders/wm/qxnnh4c14rngxbqgv_39lpyr0000gp/T/npm-9656-MujUx86Q/1397720915806-0.43234812282025814/tmp.tgz
22 verbose tar unpack /var/folders/wm/qxnnh4c14rngxbqgv_39lpyr0000gp/T/npm-9656-MujUx86Q/1397720915806-0.43234812282025814/tmp.tgz
23 silly lockFile a20db0b8-5806-0-43234812282025814-package tar:///var/folders/wm/qxnnh4c14rngxbqgv_39lpyr0000gp/T/npm-9656-MujUx86Q/1397720915806-0.43234812282025814/package
24 verbose lock tar:///var/folders/wm/qxnnh4c14rngxbqgv_39lpyr0000gp/T/npm-9656-MujUx86Q/1397720915806-0.43234812282025814/package /Users/lean/.npm/a20db0b8-5806-0-43234812282025814-package.lock
25 silly lockFile 14785e21-5806-0-43234812282025814-tmp-tgz tar:///var/folders/wm/qxnnh4c14rngxbqgv_39lpyr0000gp/T/npm-9656-MujUx86Q/1397720915806-0.43234812282025814/tmp.tgz
26 verbose lock tar:///var/folders/wm/qxnnh4c14rngxbqgv_39lpyr0000gp/T/npm-9656-MujUx86Q/1397720915806-0.43234812282025814/tmp.tgz /Users/lean/.npm/14785e21-5806-0-43234812282025814-tmp-tgz.lock
27 silly gunzTarPerm modes [ '755', '644' ]
28 silly gunzTarPerm extractEntry package.json
29 silly gunzTarPerm extractEntry .npmignore
30 silly gunzTarPerm extractEntry README.md
31 silly gunzTarPerm extractEntry index.js
32 silly gunzTarPerm extractEntry jwtflow.js
33 silly gunzTarPerm extractEntry test/index.js
34 silly gunzTarPerm extractEntry test/jwtflow.js
35 silly lockFile a20db0b8-5806-0-43234812282025814-package tar:///var/folders/wm/qxnnh4c14rngxbqgv_39lpyr0000gp/T/npm-9656-MujUx86Q/1397720915806-0.43234812282025814/package
36 silly lockFile a20db0b8-5806-0-43234812282025814-package tar:///var/folders/wm/qxnnh4c14rngxbqgv_39lpyr0000gp/T/npm-9656-MujUx86Q/1397720915806-0.43234812282025814/package
37 silly lockFile 14785e21-5806-0-43234812282025814-tmp-tgz tar:///var/folders/wm/qxnnh4c14rngxbqgv_39lpyr0000gp/T/npm-9656-MujUx86Q/1397720915806-0.43234812282025814/tmp.tgz
38 silly lockFile 14785e21-5806-0-43234812282025814-tmp-tgz tar:///var/folders/wm/qxnnh4c14rngxbqgv_39lpyr0000gp/T/npm-9656-MujUx86Q/1397720915806-0.43234812282025814/tmp.tgz
39 verbose tar pack [ '/Users/lean/.npm/salesforce-api/0.3.3/package.tgz',
39 verbose tar pack   '/var/folders/wm/qxnnh4c14rngxbqgv_39lpyr0000gp/T/npm-9656-MujUx86Q/1397720915806-0.43234812282025814/package' ]
40 verbose tarball /Users/lean/.npm/salesforce-api/0.3.3/package.tgz
41 verbose folder /var/folders/wm/qxnnh4c14rngxbqgv_39lpyr0000gp/T/npm-9656-MujUx86Q/1397720915806-0.43234812282025814/package
42 silly lockFile a20db0b8-5806-0-43234812282025814-package tar:///var/folders/wm/qxnnh4c14rngxbqgv_39lpyr0000gp/T/npm-9656-MujUx86Q/1397720915806-0.43234812282025814/package
43 verbose lock tar:///var/folders/wm/qxnnh4c14rngxbqgv_39lpyr0000gp/T/npm-9656-MujUx86Q/1397720915806-0.43234812282025814/package /Users/lean/.npm/a20db0b8-5806-0-43234812282025814-package.lock
44 silly lockFile 2ee1e61c-salesforce-api-0-3-3-package-tgz tar:///Users/lean/.npm/salesforce-api/0.3.3/package.tgz
45 verbose lock tar:///Users/lean/.npm/salesforce-api/0.3.3/package.tgz /Users/lean/.npm/2ee1e61c-salesforce-api-0-3-3-package-tgz.lock
46 silly lockFile a20db0b8-5806-0-43234812282025814-package tar:///var/folders/wm/qxnnh4c14rngxbqgv_39lpyr0000gp/T/npm-9656-MujUx86Q/1397720915806-0.43234812282025814/package
47 silly lockFile a20db0b8-5806-0-43234812282025814-package tar:///var/folders/wm/qxnnh4c14rngxbqgv_39lpyr0000gp/T/npm-9656-MujUx86Q/1397720915806-0.43234812282025814/package
48 silly lockFile 2ee1e61c-salesforce-api-0-3-3-package-tgz tar:///Users/lean/.npm/salesforce-api/0.3.3/package.tgz
49 silly lockFile 2ee1e61c-salesforce-api-0-3-3-package-tgz tar:///Users/lean/.npm/salesforce-api/0.3.3/package.tgz
50 silly lockFile a874cba6-npm-salesforce-api-0-3-3-package /Users/lean/.npm/salesforce-api/0.3.3/package
51 verbose lock /Users/lean/.npm/salesforce-api/0.3.3/package /Users/lean/.npm/a874cba6-npm-salesforce-api-0-3-3-package.lock
52 silly lockFile a874cba6-npm-salesforce-api-0-3-3-package /Users/lean/.npm/salesforce-api/0.3.3/package
53 silly lockFile a874cba6-npm-salesforce-api-0-3-3-package /Users/lean/.npm/salesforce-api/0.3.3/package
54 verbose tar unpack /Users/lean/.npm/salesforce-api/0.3.3/package.tgz
55 silly lockFile a1210178-npm-salesforce-api-0-3-3-package tar:///Users/lean/.npm/salesforce-api/0.3.3/package
56 verbose lock tar:///Users/lean/.npm/salesforce-api/0.3.3/package /Users/lean/.npm/a1210178-npm-salesforce-api-0-3-3-package.lock
57 silly lockFile 2ee1e61c-salesforce-api-0-3-3-package-tgz tar:///Users/lean/.npm/salesforce-api/0.3.3/package.tgz
58 verbose lock tar:///Users/lean/.npm/salesforce-api/0.3.3/package.tgz /Users/lean/.npm/2ee1e61c-salesforce-api-0-3-3-package-tgz.lock
59 silly gunzTarPerm modes [ '755', '644' ]
60 silly gunzTarPerm extractEntry package.json
61 silly gunzTarPerm extractEntry .npmignore
62 silly gunzTarPerm extractEntry README.md
63 silly gunzTarPerm extractEntry index.js
64 silly gunzTarPerm extractEntry jwtflow.js
65 silly gunzTarPerm extractEntry test/index.js
66 silly gunzTarPerm extractEntry test/jwtflow.js
67 silly lockFile a1210178-npm-salesforce-api-0-3-3-package tar:///Users/lean/.npm/salesforce-api/0.3.3/package
68 silly lockFile a1210178-npm-salesforce-api-0-3-3-package tar:///Users/lean/.npm/salesforce-api/0.3.3/package
69 silly lockFile 2ee1e61c-salesforce-api-0-3-3-package-tgz tar:///Users/lean/.npm/salesforce-api/0.3.3/package.tgz
70 silly lockFile 2ee1e61c-salesforce-api-0-3-3-package-tgz tar:///Users/lean/.npm/salesforce-api/0.3.3/package.tgz
71 verbose chmod /Users/lean/.npm/salesforce-api/0.3.3/package.tgz 644
72 verbose chown /Users/lean/.npm/salesforce-api/0.3.3/package.tgz [ 502, 20 ]
73 silly lockFile 3a52ce78- .
74 silly lockFile 3a52ce78- .
75 silly publish { name: 'salesforce-api',
75 silly publish   version: '0.3.3',
75 silly publish   description: 'Module to invoke salesforce.com services',
75 silly publish   author: { name: 'Kidozen', email: 'support@kidozen.com' },
75 silly publish   contributors:
75 silly publish    [ { name: 'Silvio Massari', email: 'silvio@kidozen.com' },
75 silly publish      { name: 'Christian Carnero', email: 'chris@kidozen.com' } ],
75 silly publish   main: 'index.js',
75 silly publish   scripts: { test: 'mocha -R spec test' },
75 silly publish   repository:
75 silly publish    { type: 'git',
75 silly publish      url: 'https://github.com/kidozen/node-salesforce-api.git' },
75 silly publish   keywords: [ 'kidozen', 'connector', 'salesforce' ],
75 silly publish   license: 'MIT',
75 silly publish   dependencies:
75 silly publish    { 'node-salesforce': '0.6.3',
75 silly publish      'mem-cache': '0.0.1',
75 silly publish      'node-uuid': '1.4.0',
75 silly publish      request: '2.34.0',
75 silly publish      jsonwebtoken: '0.2.0' },
75 silly publish   devDependencies: { mocha: '1.11.0', assert: '0.4.9', nock: '0.18.2' },
75 silly publish   readme: '# SalesForce client for Nodejs\nThis node module provides a set of methods to interact against SalesForce\'s services.\nThe module was created as part of [KidoZen](http://www.kidozen.com) project, as a connector for its Enterprise API feature.\n\n## Installation\n\nUse npm to install the module:\n\n```\n> npm install salesforce-api\n```\n\n## API\n\nDue to the asynchrounous nature of Nodejs, this module uses callbacks in requests. All callbacks have 2 arguments: `err` and `data`.\n\n```\nfunction callback (err, data) {\n\t// err contains an Error class instance, if any\n\t// data contains the resulting data\n} \n``` \n\n\n### Authentication\n\n\n#### UserName and Password login\n\nThe module exports a Class and its constructor requires a configuration object with following properties\n\n* `username`: Required string. End-user’s username.\n* `password`: Required string. End-user’s password.\n\n```\nvar SalesForce = require("salesforce-api");\nvar salesforce = new SalesForce();\nsalesforce.authenticate({\n        username: "account@kidozen.com",\n        password: "secret"\n    }, ...\n```\n\n#### Username and Password Login (OAuth2 Resource Owner Password Credential)\n\nWhen OAuth2 client information is given to ctor. authenticate(username, password) uses OAuth2 Resource Owner Password Credential flow to login to Salesforce.\n\n* `username`: Required string. End-user’s username.\n* `password`: Required string. End-user’s password.\n* `oauth2`: Required. OAuth2 information\n\n```\nvar SalesForce = require("salesforce-api");\nvar salesforce = new SalesForce();\nsalesforce.authenticate({\n        username: "account@kidozen.com",\n        password: "secret",\n        oauth2 : {\n            clientId : \'...\',\n            clientSecret : \'...\',\n            redirectUri : \'https://login.salesforce.com/services/oauth2/token\'\n        }\n    }, ...\n\n```\n\n\n#### Access Token\n\nAfter the authenticate API call, you can get Salesforce access token and its instance URL. Next time you can use them to establish connection.\n\n```\nvar OAUTH2SessionInfo = {\n      \tinstanceUrl : \'<your Salesforce server URL (e.g. https://na1.salesforce.com) is here>\',\n      \taccessToken : \'<your Salesforce session ID is here>\'\n   \t\t// you can find this values in the result of authenticate method\n    };\n\nvar query = {\n    credentials : OAUTH2SessionInfo,\n    SOSQL: "SELECT Id from Account"\n};\n\napi.Query(query, function(err, result) {\n\t...\n\t...\n\t...\n\n```\n\n\n### Methods\nAll public methods has the same signature, their have two arguments: `options` and `callback`.\n* `options` must be an object instance containig all parameters for the method.\n* `callback` must be a function.\n\n#### Describe(options, callback)\n\nThis method should be used to retrieve metadata for an object.\n\n**Parameters:**\n* `options`: A required object instance:\n\t* `objectClass`: Optional string.\n* `callback`: A required function for callback.\n\n\n```\nsalesforce.Describe({ objectClass:"Account" }, function(err, result) {\n\tif (err) return console.error (err);\n\tconsole.log (result);\n});\n```\n\n#### DescribeGlobal(options, callback)\n\nThis method returns all SObject information registered in Salesforce\n\n**Parameters:**\n* `callback`: A required function for callback.\n\n\n```\nsalesforce.DescribeGlobal(function(err, result) {\n\tif (err) return console.error (err);\n\tconsole.log (result);\n});\n```\n\n#### SOSQL Query(options, callback)\n\nUse this method to execute a SOQL query that returns all the results in a single response, or if needed, returns part of the results and an identifier used to retrieve the remaining results.\n\n**Parameters:**\n* `options`: A required object instance:\n\t* `SOSQL`: Required string.\n* `callback`: A required function for callback.\n\n\n```\nsalesforce.Query({ SOSQL: "SELECT Id, Name, BillingCity FROM Account" }, function(err, result) {\n\tif (err) return console.error (err);\n\tconsole.log (result);\n});\n```\n#### Json Query(options, callback)\n\nUse this method to execute a SOQL query that returns all the results in a single response, or if needed, returns part of the results and an identifier used to retrieve the remaining results.\n\n**Parameters:**\n* `options`: A required object instance:\n\t* `Entity`: Required string.\n\t* `Conditions`: Required string.\n\t* `Fields`: Required string.\n\t* `Options`: Required string.\n* `callback`: A required function for callback.\n\n\n```\nvar query = {\n                Entity: "Account",\n                Conditions : { \n                    Name : { $like : \'G%\' }\n                },\n                Fields : {\n                    Id: 1,\n                    Name: 1,\n                    CreatedDate: 1 \n                },\n                Options : { \n                    Limit : 5,\n                    Skip: 10\n                }\n            };\nsalesforce.Query(query, function(err, result) {\n\tif (err) return console.error (err);\n\tconsole.log (result);\n});\n```\n\n\n#### Create(options, callback)\n\nThis method allows you to create a new record. You have to supply the required field values of the resource.\n\n**Parameters:**\n* `options`: A required object instance:\n\t* `Entity`: Required string.\n\t* `Details`: Required object instance\n* `callback`: A required function for callback.\n\nThe following example creates a new Account record:\n\n```\nvar newAccount = { Name: "Foo account" };\nsalesforce.Create({ Entity: "Account",  Details: newAccount }, function(err, result) {\n\tif (err) return console.error (err);\n\tconsole.log (result);\n});\n```\n\n#### Update(options, callback)\n\nUse this method to update records. Provide the updated record information at the `data` property.\n\n**Parameters:**\n* `options`: A required object instance:\n\t* `Entity`: Required string.\n\t* `Details`: Required object. Updated record. It must have the `id` property with the object id to update\n* `callback`: A required function for callback.\n\nIn the following example, the Billing City within an Account is update.\n\n```\nvar options = {\n\tEntity: "Account",\n\tDetails : \n\t\t{\n\t\t\tid: "CD656092",\n\t\t\tBillingCity: "San Francisco" \n\t\t}\n\t}\n};\n\nsalesforce.Update(options, function(err, result) {\n\tif (err) return console.error (err);\n\tconsole.log (result);\n});\n```\n\n#### Upsert(options, callback)\n\nWill upsert a record or records given in first argument. External ID field name must be specified in second argument.\n\n**Parameters:**\n* `options`: A required object instance:\n\t* `Entity`: Required string.\n\t* `Details`: Required object. Updated record. It must have the `ExtId__c` property with the object id to update\n\t* `ExternalIdName` the field id name\n* `callback`: A required function for callback.\n\n```\nvar options = {\n\tEntity: "UpsertTable__c",\n\tDetails : \n\t\t{\n\t\t\tName : \'Record #1\',\n  \t\t\tExtId__c : \'ID-0000001\'\n  \t\t},\n\tExternalIdName : \'ExtId__c\'\n\t}\n};\n\nsalesforce.Upsert(options, function(err, result) {\n\tif (err) return console.error (err);\n\tconsole.log (result);\n});\n```\n\n#### Delete(options, callback)\n\nUse this method to delete an existing record.\n\n**Parameters:**\n* `options`: A required object instance:\n\t* `Entity`: Required string.\n\t* `Details`: Required, string or array of strings with the ids to delete\n* `callback`: A required function for callback.\n\nIn the following example removes the record the ID 1234 from Account\n\n```\nvar options = {\n\tEntity: "Account",\n\tDetails: "1234"\n};\n\nsalesforce.Delete(options, function(err, result) {\n\tif (err) return console.error (err);\n\tconsole.log (result);\n});\n```\nor\n\n```\nvar options = {\n\tEntity: "Account",\n\tDetails: ["1234","012"]\n};\n\nsalesforce.Delete(options, function(err, result) {\n\tif (err) return console.error (err);\n\tconsole.log (result);\n});\n```\n\n\n',
75 silly publish   readmeFilename: 'README.md',
75 silly publish   bugs: { url: 'https://github.com/kidozen/node-salesforce-api/issues' },
75 silly publish   homepage: 'https://github.com/kidozen/node-salesforce-api',
75 silly publish   _id: 'salesforce-api@0.3.3',
75 silly publish   dist: { shasum: '834433bf3c1b10c62ebb1e37d0d4c205a097047c' },
75 silly publish   _from: '.' }
76 verbose url raw salesforce-api
77 verbose url resolving [ 'https://registry.npmjs.org/', './salesforce-api' ]
78 verbose url resolved https://registry.npmjs.org/salesforce-api
79 info trying registry request attempt 1 at 04:48:35
80 http PUT https://registry.npmjs.org/salesforce-api
81 http 403 https://registry.npmjs.org/salesforce-api
82 error publish Failed PUT 403
83 error Error: forbidden cannot modify pre-existing version: 0.3.3
83 error old={"name":"salesforce-api","version":"0.3.3","description":"Module to invoke salesforce.com services","author":{"name":"Kidozen","email":"support@kidozen.com"},"contributors":[{"name":"Silvio Massari","email":"silvio@kidozen.com"},{"name":"Christian Carnero","email":"chris@kidozen.com"},{"name":"Alejandro Oviedo","email":"alejandro.oviedo@kidozen.com"}],"main":"index.js","scripts":{"test":"mocha -R spec test"},"repository":{"type":"git","url":"https://github.com/kidozen/node-salesforce-api.git"},"keywords":["kidozen","connector","salesforce"],"license":"MIT","dependencies":{"node-salesforce":"0.6.3","mem-cache":"0.0.1","node-uuid":"1.4.0","request":"2.34.0","jsonwebtoken":"0.2.0"},"devDependencies":{"mocha":"1.11.0","assert":"0.4.9","nock":"0.18.2"},"bugs":{"url":"https://github.com/kidozen/node-salesforce-api/issues"},"homepage":"https://github.com/kidozen/node-salesforce-api","_id":"salesforce-api@0.3.3","dist":{"shasum":"e09a3b6507d837188c2ee672f95ccc85d420983f","tarball":"http://registry.npmjs.org/salesforce-api/-/salesforce-api-0.3.3.tgz"},"_from":".","_npmVersion":"1.4.3","_npmUser":{"name":"kidozen","email":"development@kidozen.com"},"maintainers":[{"name":"kidozen","email":"development@kidozen.com"}]}
83 error new={"name":"salesforce-api","version":"0.3.3","description":"Module to invoke salesforce.com services","author":{"name":"Kidozen","email":"support@kidozen.com"},"contributors":[{"name":"Silvio Massari","email":"silvio@kidozen.com"},{"name":"Christian Carnero","email":"chris@kidozen.com"}],"main":"index.js","scripts":{"test":"mocha -R spec test"},"repository":{"type":"git","url":"https://github.com/kidozen/node-salesforce-api.git"},"keywords":["kidozen","connector","salesforce"],"license":"MIT","dependencies":{"node-salesforce":"0.6.3","mem-cache":"0.0.1","node-uuid":"1.4.0","request":"2.34.0","jsonwebtoken":"0.2.0"},"devDependencies":{"mocha":"1.11.0","assert":"0.4.9","nock":"0.18.2"},"readme":"# SalesForce client for Nodejs\u000aThis node module provides a set of methods to interact against SalesForce's services.\u000aThe module was created as part of [KidoZen](http://www.kidozen.com) project, as a connector for its Enterprise API feature.\u000a\u000a## Installation\u000a\u000aUse npm to install the module:\u000a\u000a```\u000a> npm install salesforce-api\u000a```\u000a\u000a## API\u000a\u000aDue to the asynchrounous nature of Nodejs, this module uses callbacks in requests. All callbacks have 2 arguments: `err` and `data`.\u000a\u000a```\u000afunction callback (err, data) {\u000a\u0009// err contains an Error class instance, if any\u000a\u0009// data contains the resulting data\u000a} \u000a``` \u000a\u000a\u000a### Authentication\u000a\u000a\u000a#### UserName and Password login\u000a\u000aThe module exports a Class and its constructor requires a configuration object with following properties\u000a\u000a* `username`: Required string. End-user’s username.\u000a* `password`: Required string. End-user’s password.\u000a\u000a```\u000avar SalesForce = require(\"salesforce-api\");\u000avar salesforce = new SalesForce();\u000asalesforce.authenticate({\u000a        username: \"account@kidozen.com\",\u000a        password: \"secret\"\u000a    }, ...\u000a```\u000a\u000a#### Username and Password Login (OAuth2 Resource Owner Password Credential)\u000a\u000aWhen OAuth2 client information is given to ctor. authenticate(username, password) uses OAuth2 Resource Owner Password Credential flow to login to Salesforce.\u000a\u000a* `username`: Required string. End-user’s username.\u000a* `password`: Required string. End-user’s password.\u000a* `oauth2`: Required. OAuth2 information\u000a\u000a```\u000avar SalesForce = require(\"salesforce-api\");\u000avar salesforce = new SalesForce();\u000asalesforce.authenticate({\u000a        username: \"account@kidozen.com\",\u000a        password: \"secret\",\u000a        oauth2 : {\u000a            clientId : '...',\u000a            clientSecret : '...',\u000a            redirectUri : 'https://login.salesforce.com/services/oauth2/token'\u000a        }\u000a    }, ...\u000a\u000a```\u000a\u000a\u000a#### Access Token\u000a\u000aAfter the authenticate API call, you can get Salesforce access token and its instance URL. Next time you can use them to establish connection.\u000a\u000a```\u000avar OAUTH2SessionInfo = {\u000a      \u0009instanceUrl : '<your Salesforce server URL (e.g. https://na1.salesforce.com) is here>',\u000a      \u0009accessToken : '<your Salesforce session ID is here>'\u000a   \u0009\u0009// you can find this values in the result of authenticate method\u000a    };\u000a\u000avar query = {\u000a    credentials : OAUTH2SessionInfo,\u000a    SOSQL: \"SELECT Id from Account\"\u000a};\u000a\u000aapi.Query(query, function(err, result) {\u000a\u0009...\u000a\u0009...\u000a\u0009...\u000a\u000a```\u000a\u000a\u000a### Methods\u000aAll public methods has the same signature, their have two arguments: `options` and `callback`.\u000a* `options` must be an object instance containig all parameters for the method.\u000a* `callback` must be a function.\u000a\u000a#### Describe(options, callback)\u000a\u000aThis method should be used to retrieve metadata for an object.\u000a\u000a**Parameters:**\u000a* `options`: A required object instance:\u000a\u0009* `objectClass`: Optional string.\u000a* `callback`: A required function for callback.\u000a\u000a\u000a```\u000asalesforce.Describe({ objectClass:\"Account\" }, function(err, result) {\u000a\u0009if (err) return console.error (err);\u000a\u0009console.log (result);\u000a});\u000a```\u000a\u000a#### DescribeGlobal(options, callback)\u000a\u000aThis method returns all SObject information registered in Salesforce\u000a\u000a**Parameters:**\u000a* `callback`: A required function for callback.\u000a\u000a\u000a```\u000asalesforce.DescribeGlobal(function(err, result) {\u000a\u0009if (err) return console.error (err);\u000a\u0009console.log (result);\u000a});\u000a```\u000a\u000a#### SOSQL Query(options, callback)\u000a\u000aUse this method to execute a SOQL query that returns all the results in a single response, or if needed, returns part of the results and an identifier used to retrieve the remaining results.\u000a\u000a**Parameters:**\u000a* `options`: A required object instance:\u000a\u0009* `SOSQL`: Required string.\u000a* `callback`: A required function for callback.\u000a\u000a\u000a```\u000asalesforce.Query({ SOSQL: \"SELECT Id, Name, BillingCity FROM Account\" }, function(err, result) {\u000a\u0009if (err) return console.error (err);\u000a\u0009console.log (result);\u000a});\u000a```\u000a#### Json Query(options, callback)\u000a\u000aUse this method to execute a SOQL query that returns all the results in a single response, or if needed, returns part of the results and an identifier used to retrieve the remaining results.\u000a\u000a**Parameters:**\u000a* `options`: A required object instance:\u000a\u0009* `Entity`: Required string.\u000a\u0009* `Conditions`: Required string.\u000a\u0009* `Fields`: Required string.\u000a\u0009* `Options`: Required string.\u000a* `callback`: A required function for callback.\u000a\u000a\u000a```\u000avar query = {\u000a                Entity: \"Account\",\u000a                Conditions : { \u000a                    Name : { $like : 'G%' }\u000a                },\u000a                Fields : {\u000a                    Id: 1,\u000a                    Name: 1,\u000a                    CreatedDate: 1 \u000a                },\u000a                Options : { \u000a                    Limit : 5,\u000a                    Skip: 10\u000a                }\u000a            };\u000asalesforce.Query(query, function(err, result) {\u000a\u0009if (err) return console.error (err);\u000a\u0009console.log (result);\u000a});\u000a```\u000a\u000a\u000a#### Create(options, callback)\u000a\u000aThis method allows you to create a new record. You have to supply the required field values of the resource.\u000a\u000a**Parameters:**\u000a* `options`: A required object instance:\u000a\u0009* `Entity`: Required string.\u000a\u0009* `Details`: Required object instance\u000a* `callback`: A required function for callback.\u000a\u000aThe following example creates a new Account record:\u000a\u000a```\u000avar newAccount = { Name: \"Foo account\" };\u000asalesforce.Create({ Entity: \"Account\",  Details: newAccount }, function(err, result) {\u000a\u0009if (err) return console.error (err);\u000a\u0009console.log (result);\u000a});\u000a```\u000a\u000a#### Update(options, callback)\u000a\u000aUse this method to update records. Provide the updated record information at the `data` property.\u000a\u000a**Parameters:**\u000a* `options`: A required object instance:\u000a\u0009* `Entity`: Required string.\u000a\u0009* `Details`: Required object. Updated record. It must have the `id` property with the object id to update\u000a* `callback`: A required function for callback.\u000a\u000aIn the following example, the Billing City within an Account is update.\u000a\u000a```\u000avar options = {\u000a\u0009Entity: \"Account\",\u000a\u0009Details : \u000a\u0009\u0009{\u000a\u0009\u0009\u0009id: \"CD656092\",\u000a\u0009\u0009\u0009BillingCity: \"San Francisco\" \u000a\u0009\u0009}\u000a\u0009}\u000a};\u000a\u000asalesforce.Update(options, function(err, result) {\u000a\u0009if (err) return console.error (err);\u000a\u0009console.log (result);\u000a});\u000a```\u000a\u000a#### Upsert(options, callback)\u000a\u000aWill upsert a record or records given in first argument. External ID field name must be specified in second argument.\u000a\u000a**Parameters:**\u000a* `options`: A required object instance:\u000a\u0009* `Entity`: Required string.\u000a\u0009* `Details`: Required object. Updated record. It must have the `ExtId__c` property with the object id to update\u000a\u0009* `ExternalIdName` the field id name\u000a* `callback`: A required function for callback.\u000a\u000a```\u000avar options = {\u000a\u0009Entity: \"UpsertTable__c\",\u000a\u0009Details : \u000a\u0009\u0009{\u000a\u0009\u0009\u0009Name : 'Record #1',\u000a  \u0009\u0009\u0009ExtId__c : 'ID-0000001'\u000a  \u0009\u0009},\u000a\u0009ExternalIdName : 'ExtId__c'\u000a\u0009}\u000a};\u000a\u000asalesforce.Upsert(options, function(err, result) {\u000a\u0009if (err) return console.error (err);\u000a\u0009console.log (result);\u000a});\u000a```\u000a\u000a#### Delete(options, callback)\u000a\u000aUse this method to delete an existing record.\u000a\u000a**Parameters:**\u000a* `options`: A required object instance:\u000a\u0009* `Entity`: Required string.\u000a\u0009* `Details`: Required, string or array of strings with the ids to delete\u000a* `callback`: A required function for callback.\u000a\u000aIn the following example removes the record the ID 1234 from Account\u000a\u000a```\u000avar options = {\u000a\u0009Entity: \"Account\",\u000a\u0009Details: \"1234\"\u000a};\u000a\u000asalesforce.Delete(options, function(err, result) {\u000a\u0009if (err) return console.error (err);\u000a\u0009console.log (result);\u000a});\u000a```\u000aor\u000a\u000a```\u000avar options = {\u000a\u0009Entity: \"Account\",\u000a\u0009Details: [\"1234\",\"012\"]\u000a};\u000a\u000asalesforce.Delete(options, function(err, result) {\u000a\u0009if (err) return console.error (err);\u000a\u0009console.log (result);\u000a});\u000a```\u000a\u000a\u000a","readmeFilename":"README.md","bugs":{"url":"https://github.com/kidozen/node-salesforce-api/issues"},"homepage":"https://github.com/kidozen/node-salesforce-api","_id":"salesforce-api@0.3.3","dist":{"shasum":"834433bf3c1b10c62ebb1e37d0d4c205a097047c","tarball":"http://registry.npmjs.org/salesforce-api/-/salesforce-api-0.3.3.tgz"},"_from":".","_npmVersion":"1.4.3","_npmUser":{"name":"kidozen","email":"development@kidozen.com"},"maintainers":[{"name":"kidozen","email":"development@kidozen.com"}]}: salesforce-api
83 error     at RegClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:237:14)
83 error     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:123:22)
83 error     at Request.EventEmitter.emit (events.js:98:17)
83 error     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:893:14)
83 error     at Request.EventEmitter.emit (events.js:117:20)
83 error     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:844:12)
83 error     at IncomingMessage.EventEmitter.emit (events.js:117:20)
83 error     at _stream_readable.js:920:16
83 error     at process._tickCallback (node.js:415:13)
84 error If you need help, you may report this *entire* log,
84 error including the npm and node versions, at:
84 error     <http://github.com/npm/npm/issues>
85 error System Darwin 12.3.0
86 error command "/usr/local/bin/node" "/usr/local/bin/npm" "publish"
87 error cwd /Users/lean/kidozen/node-salesforce-api
88 error node -v v0.10.26
89 error npm -v 1.4.3
90 verbose exit [ 1, true ]
